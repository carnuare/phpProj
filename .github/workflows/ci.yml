name: CI PHPUnit and Puppeteer

on: 
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  sonar:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: generate coverage
      run: |
        cd phpProj    
        ./vendor/bin/phpunit --testsuite all --coverage-clover cov/coverage.xml
    - uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  php-unit-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        php: [7.4]
        dependency-version: [prefer-stable]

    steps:
    - uses: actions/checkout@v2
    - name: Setup PHP with Xdebug
      uses: shivammathur/setup-php@v2
      with:
        php-version: '7.4'
        coverage: xdebug
    - name: Install phpunit 9 #XDEBUG_MODE=coverage /usr/local/bin/phpunit --coverage-text
      run: |
        sudo curl --location --output /usr/local/bin/phpunit "https://phar.phpunit.de/phpunit.phar"
        sudo chmod +x /usr/local/bin/phpunit
        phpunit --check-version
    - name: Run PHPUnit tests
      run: |
        cd src/tests/phpunit
        phpunit . --coverage-clover cov/coverage.xml --whitelist=Sample.php 
    - name: Upload to Codecov
      uses: codecov/codecov-action@v2
      with:
        directory: ./src/tests/phpunit/cov
        token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
        flags: backend
        verbose: true
        #files: ./src/tests/phpunit/cov/coverage.xml
        #flags: unittests # optional
  puppeteer:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        php: [7.4]
        dependency-version: [prefer-stable]

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
    - run: composer update
    - run: composer install
    - name: Run App and DB
      run: |
        docker-compose up -d 
        .github/workflows/installDB.sh

    - name: Run Tests
      run: |
        sudo apt install mysql-server
        npm install puppeteer
        echo "Running Puppeteer tests..."
        cd src/tests
        node puppeteer/example.js
      #es importante hacer el node desde la carpeta tests porque si no, el tests no coge bien la ruta para guardar las screenshots
  testcafe:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        php: [7.4]
        dependency-version: [prefer-stable]

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
    - run: composer update
    - run: composer install
    - name: Run App and DB
      run: |
        docker-compose up -d 
        .github/workflows/installDB.sh

    - name: Run Tests
      run: |
        sudo apt install mysql-server
        npm install --save @ffmpeg-installer/ffmpeg
        npm install -g testcafe
        sudo apt-get install xvfb
        sudo apt-get install xvfb firefox
        cd src/tests/testcafe
        testcafe firefox:headless test.js --video artifacts/videos --video-options  pathPattern=failure_$(date -u +%F).mp4,failedOnly=true,singleFile=true
    # Upload to Drive
    - name: Upload video failure to Google Drive
      if: ${{ failure() }}
      uses: Jodebu/upload-to-drive@master
      with:
        target: src/tests/testcafe/artifacts/videos
        credentials: ${{ secrets.DRIVE_CREDENTIALS }}
        folder: 1PDIT4qTieCXaiKzBEBIWmw4mbpDHtT8B  
 
        